buildscript {
    ext.kotlin_version = '1.3.41'

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'kotlin2js'
apply plugin: 'com.moowork.node'
apply plugin: 'maven-publish'

group 'com.github.juggernaut0.kui'
version '0.8.0'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js"
    testCompile "org.jetbrains.kotlin:kotlin-test-js"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar
        }
    }
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

node {
    download = true
}

task installJest(type: NpmTask) {
    args = ['install', 'jest']
}

task runJest(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules]) {
    script = file('node_modules/jest/bin/jest.js')
    args = [projectDir.toURI().relativize(compileTestKotlin2Js.outputFile.toURI())]
}

test.dependsOn runJest

project("example") {
    apply plugin: "kotlin2js"

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":")
        compile "org.jetbrains.kotlin:kotlin-stdlib-js"
        testCompile "org.jetbrains.kotlin:kotlin-test-js"
    }

    task assembleWeb(type: Copy, dependsOn: classes) {
        configurations.compile.each { File file ->
            from(zipTree(file.absolutePath), {
                includeEmptyDirs = false
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js")
                }
            })
        }
        from compileKotlin2Js.destinationDir
        include '**/*.js'
        includeEmptyDirs false
        into "${projectDir}/build/web/js"
    }

    task copyStaticWeb(type: Copy) {
        from 'static'
        exclude 'test.html'
        into "${projectDir}/build/web"
    }

    assemble.dependsOn(assembleWeb, copyStaticWeb)
}
